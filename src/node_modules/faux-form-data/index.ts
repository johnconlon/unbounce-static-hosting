// Adapted from https://github.com/jimmywarting/FormData and stripped down.

function normalizeLinefeeds (value: string) {
  return value.replace(/\r\n/g, '\n').replace(/\n/g, '\r\n')
}

function each(arr: any, cb: (arg: any) => void) {
  for (let i = 0; i < arr.length; i++) {
    cb(arr[i]);
  }
}

export default class FauxFormData {
  _data: {[name: string]: string[]} = {}

  constructor(form: HTMLFormElement) {
    each(form.elements, (elm: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) => {
      if (
        !elm.name ||
        elm.disabled ||
        elm.type === "submit" ||
        elm.type === "button"
      )
        return;

      if (elm.type === "file") {
        throw new Error("faux-form-data doesn't support files")
      } else if (elm.type === "select-multiple" || elm.type === "select-one") {
        each((elm as HTMLSelectElement).options, opt => {
          !opt.disabled && opt.selected && this.append(elm.name, opt.value);
        });
      } else if (elm.type === "radio") {
        if ((elm as HTMLInputElement).checked) this.append(elm.name, elm.value);
      } else if (elm.type === "checkbox") {
        (elm as HTMLInputElement).checked ? this.append(elm.name, 'true') : this.append(elm.name, 'false');
      } else {
        const value =
          elm.type === "textarea" ? normalizeLinefeeds(elm.value) : elm.value;
        this.append(elm.name, value);
      }
    });
  }

  append(name: string, value: string) {
    const map = this._data;
    if (!map[name]) map[name] = [];
    map[name].push(value);
  }

  delete(name: string) {
    delete this._data[String(name)];
  }

  forEach = (callback: Function) => {
    for (let [name, value] of Object.entries(this._data)) {
      callback(name, value)
    }
  }

  get(name: string) {
    const map = this._data;
    return map[name] ? map[name][0] : null;
  }

  getAll(name: string) {
    return (this._data[name] || [])
  }

  has(name: string) {
    return !!this._data[name]
  }

  set(name: string, value: string) {
    this._data[name] = [value]
  }

  toString() {
    return "[object FauxFormData]";
  }
}
